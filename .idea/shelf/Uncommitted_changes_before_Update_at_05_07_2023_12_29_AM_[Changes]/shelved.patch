Index: src/jvmMain/kotlin/common/component/PaginationTable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package common.component\r\n\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.material.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.foundation.*\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.Button\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.lazy.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.Dp\r\nimport features.sons_of_officers.domain.model.Person\r\nimport styles.CairoTypography\r\n\r\n@Composable\r\nfun PaginatedTable(\r\n    headers: List<String>,\r\n    personList: List<Person>,\r\n    itemsPerPage: Int,\r\n    columnWidths: List<Dp>\r\n) {\r\n    val pageCount = (personList.size + itemsPerPage - 1) / itemsPerPage\r\n    var currentPage by remember { mutableStateOf(0) }\r\n    //btn check\r\n    var isButtonVisible by remember { mutableStateOf(false) }\r\n\r\n\r\n    Column() {\r\n        Row {\r\n            headers.forEachIndexed { index, header ->\r\n                Text(\r\n                    text = header,\r\n                    style = CairoTypography.h4,\r\n                    color = Color.White,\r\n                    modifier = Modifier\r\n                        .width(columnWidths[index])\r\n                        .background(Color(0xff3B5EA1))\r\n//                        .border(0.5.dp, Color.White)\r\n                        .padding(8.dp)\r\n                )\r\n            }\r\n        }\r\n        LazyColumn {\r\n            items(personList.chunked(itemsPerPage)[currentPage]) { person ->\r\n                Row(\r\n                    modifier = Modifier.background(\r\n                        if ((currentPage % 2 == 0 && personList.indexOf(person) % 2 == 0) ||\r\n                            (currentPage % 2 != 0 && personList.indexOf(person) % 2 != 0))\r\n                            Color.LightGray else Color.White\r\n                    )\r\n                ) {\r\n                    Text(\r\n                        text = person.id,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[0])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.fileNumber,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[1])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.name,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[2])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.libyaId,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[3])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.motherName,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[4])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.educationLevel,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[5])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.city,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[6])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.phoneNumber,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[7])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = person.recruiter,\r\n                        modifier = Modifier\r\n                            .width(columnWidths[8])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = if (person.procedures[\"training\"] == true) {\r\n                            \"نعم\"\r\n                        } else {\r\n                            \"لا\"\r\n                        },\r\n                        modifier = Modifier\r\n                            .width(columnWidths[9])\r\n                            .padding(8.dp)\r\n                    )\r\n                    Text(\r\n                        text = if (person.justificationsRequire.values.all { it }) {\r\n                            \"مستوفي\"\r\n                        } else {\r\n                            \"نواقص\"\r\n                        },\r\n                        modifier = Modifier\r\n                            .width(columnWidths[10])\r\n                            .padding(8.dp)\r\n                    )\r\n                    val justifications = person.justificationsRequire.filterValues { it }.keys\r\n                    isButtonVisible = !person.justificationsRequire.values.all { it } && !person.procedures.values.all { it }\r\n                    if (isButtonVisible) {\r\n                        Button(\r\n                            onClick = { /* handle button click */ }\r\n                        ) {\r\n                            Text(\"إضافة\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Spacer(modifier = Modifier.height(10.dp))\r\n        Row(\r\n            horizontalArrangement = Arrangement.Center,\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            Button(\r\n                shape = RoundedCornerShape(20.dp),\r\n                onClick = { if (currentPage > 0) currentPage-- }) {\r\n                Text(\"السابقة\",\r\n                    style = CairoTypography.h4,\r\n                    fontWeight = FontWeight.Bold\r\n\r\n                )\r\n            }\r\n            Text(\"الصفحة ${currentPage + 1} من $pageCount\",\r\n                style = CairoTypography.h4,\r\n                fontWeight = FontWeight.Bold,\r\n\r\n                modifier = Modifier.padding(8.dp))\r\n            Button(\r\n                shape = RoundedCornerShape(20.dp),\r\n                onClick = { if (currentPage < pageCount - 1) currentPage++ }) {\r\n                Text(\"التالية\",\r\n                    style = CairoTypography.h4,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/jvmMain/kotlin/common/component/PaginationTable.kt b/src/jvmMain/kotlin/common/component/PaginationTable.kt
--- a/src/jvmMain/kotlin/common/component/PaginationTable.kt	(revision 31e4316feaefdbe86203fa4bfc858c0b32137c7e)
+++ b/src/jvmMain/kotlin/common/component/PaginationTable.kt	(date 1688509631169)
@@ -21,8 +21,11 @@
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.Dp
 import features.sons_of_officers.domain.model.Person
+import navcontroller.NavController
+import navcontroller.rememberNavController
 import styles.CairoTypography
 
+
 @Composable
 fun PaginatedTable(
     headers: List<String>,
@@ -30,9 +33,9 @@
     itemsPerPage: Int,
     columnWidths: List<Dp>
 ) {
+//    val navController = rememberNavController()
     val pageCount = (personList.size + itemsPerPage - 1) / itemsPerPage
     var currentPage by remember { mutableStateOf(0) }
-    //btn check
     var isButtonVisible by remember { mutableStateOf(false) }
 
 
@@ -46,7 +49,6 @@
                     modifier = Modifier
                         .width(columnWidths[index])
                         .background(Color(0xff3B5EA1))
-//                        .border(0.5.dp, Color.White)
                         .padding(8.dp)
                 )
             }
@@ -138,7 +140,9 @@
                     isButtonVisible = !person.justificationsRequire.values.all { it } && !person.procedures.values.all { it }
                     if (isButtonVisible) {
                         Button(
-                            onClick = { /* handle button click */ }
+                            onClick = {
+//                                navController.navigate("addSonsOfOfficersScreen")
+                            }
                         ) {
                             Text("إضافة")
                         }
@@ -155,21 +159,23 @@
             Button(
                 shape = RoundedCornerShape(20.dp),
                 onClick = { if (currentPage > 0) currentPage-- }) {
-                Text("السابقة",
+                Text(
+                    "السابقة",
                     style = CairoTypography.h4,
                     fontWeight = FontWeight.Bold
-
                 )
             }
-            Text("الصفحة ${currentPage + 1} من $pageCount",
+            Text(
+                "الصفحة ${currentPage + 1} من $pageCount",
                 style = CairoTypography.h4,
                 fontWeight = FontWeight.Bold,
-
-                modifier = Modifier.padding(8.dp))
+                modifier = Modifier.padding(8.dp)
+            )
             Button(
                 shape = RoundedCornerShape(20.dp),
                 onClick = { if (currentPage < pageCount - 1) currentPage++ }) {
-                Text("التالية",
+                Text(
+                    "التالية",
                     style = CairoTypography.h4,
                     fontWeight = FontWeight.Bold
                 )
Index: src/jvmMain/kotlin/common/component/NavigationWindow.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package common.component\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.CompositionLocalProvider\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalLayoutDirection\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.DpSize\r\nimport androidx.compose.ui.unit.LayoutDirection\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.WindowPlacement\r\nimport androidx.compose.ui.window.WindowState\r\nimport navcontroller.NavController\r\nimport navcontroller.NavigationHost\r\nimport navcontroller.composable\r\nimport navcontroller.rememberNavController\r\nimport styles.AppColors.background\r\nimport features.home.presentation.HomeScreen\r\nimport features.sons_of_officers.presentation.SonsOfOfficersScreen\r\nimport features.sons_of_officers.presentation.add_sons_of_officers.AddSonsOfOfficersScreen\r\nimport kotlin.system.exitProcess\r\n\r\n@Composable\r\nfun NavigationWindow(\r\n    authNavController: NavController,\r\n    windowState: WindowState\r\n) {\r\n    val screens = SystemScreen.values().toList()\r\n    val navController by rememberNavController(SystemScreen.HomeScreen.name)\r\n    val currentScreen by remember {\r\n        navController.currentScreen\r\n    }\r\n\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(5.dp)\r\n            .shadow(3.dp, RoundedCornerShape(20.dp)),\r\n        color = background,\r\n        shape = RoundedCornerShape(20.dp), //window has round corners now\r\n        elevation = 40.dp\r\n    ) {\r\n        CompositionLocalProvider(\r\n            LocalLayoutDirection provides LayoutDirection.Rtl // Set layout direction to RTL\r\n        ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .clip(RoundedCornerShape(20.dp))\r\n                .fillMaxSize(),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            NavigationRail(\r\n                modifier = Modifier.fillMaxHeight().width(140.dp)\r\n\r\n            ) {\r\n                screens.forEach {\r\n                    NavigationRailItem(\r\n                        selected = currentScreen == it.name,\r\n                        icon = {\r\n                            Icon(\r\n                                imageVector = it.icon,\r\n                                contentDescription = it.label\r\n                            )\r\n                        },\r\n                        label = {\r\n                            Text(it.label)\r\n                        },\r\n                        alwaysShowLabel = false,\r\n                        onClick = {\r\n                            navController.navigate(it.name)\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n            Spacer(modifier = Modifier.size(5.dp))\r\n            Box(\r\n                modifier = Modifier.fillMaxHeight(),\r\n            ) {\r\n                SystemNavigationHost(navController = navController, windowState)\r\n                Row(\r\n                    modifier = Modifier.align(Alignment.TopEnd),\r\n                ) {\r\n                    IconButton(onClick = { windowState.isMinimized = true }) {\r\n                        Icon(\r\n                            painter = painterResource(\"images/minimize.svg\"),\r\n                            contentDescription = \"Minimize Application\",\r\n                            tint = Color.Gray.copy(alpha = 0.4f),\r\n                            modifier = Modifier.size(18.dp)\r\n                        )\r\n                    }\r\n                    val isWindowInFullScreen = windowState.placement == WindowPlacement.Maximized\r\n                    IconButton(\r\n                        onClick = {\r\n                            if (isWindowInFullScreen)\r\n                                windowState.placement = WindowPlacement.Floating\r\n                            else\r\n                                windowState.placement = WindowPlacement.Maximized\r\n                        }\r\n\r\n                    ) {\r\n                        val iconPath = if (isWindowInFullScreen) \"floating.svg\" else \"maximize.svg\"\r\n                        Icon(\r\n                            painter = painterResource(\"images/$iconPath\"),\r\n                            contentDescription = \"Full Screen Application\",\r\n                            tint = Color.Gray.copy(alpha = 0.6f),\r\n                            modifier = Modifier.size(22.dp)\r\n                        )\r\n                    }\r\n                    IconButton(onClick = { exitProcess(0) }) {\r\n                        Image(\r\n                            painter = painterResource(\"images/exit.svg\"),\r\n                            contentDescription = \"Exit Application\",\r\n                            modifier = Modifier.size(22.dp)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }}\r\n    }\r\n}\r\n\r\n\r\nenum class SystemScreen(\r\n    val label: String,\r\n    val icon: ImageVector\r\n) {\r\n    HomeScreen(\r\n        label = \"الصفحة الرئيسية\",\r\n        icon = Icons.Filled.Home\r\n    ),\r\n    AddSonsOfOfficersScreen(\r\n        label = \"منظومة ابناء الضباط\",\r\n        icon = Icons.Filled.PersonAdd\r\n    ),\r\n    SonsOfOfficersScreen(\r\n        label = \"منظومة ابناء الضباط\",\r\n        icon = Icons.Filled.PersonAdd\r\n    ),\r\n}\r\n\r\n\r\n@Composable\r\nfun SystemNavigationHost(\r\n    navController: NavController,\r\n    windowState: WindowState\r\n) {\r\n    NavigationHost(navController) {\r\n        composable(SystemScreen.HomeScreen.name) {\r\n            HomeScreen(navController)\r\n        }\r\n\r\n        composable(SystemScreen.AddSonsOfOfficersScreen.name) {\r\n            windowState.size = DpSize(1100.dp, 950.dp)\r\n            AddSonsOfOfficersScreen(navController)\r\n        }\r\n        composable(SystemScreen.SonsOfOfficersScreen.name) {\r\n            windowState.size = DpSize(1100.dp, 950.dp)\r\n            SonsOfOfficersScreen(navController)\r\n        }\r\n\r\n    }.build()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/jvmMain/kotlin/common/component/NavigationWindow.kt b/src/jvmMain/kotlin/common/component/NavigationWindow.kt
--- a/src/jvmMain/kotlin/common/component/NavigationWindow.kt	(revision 31e4316feaefdbe86203fa4bfc858c0b32137c7e)
+++ b/src/jvmMain/kotlin/common/component/NavigationWindow.kt	(date 1688509631149)
@@ -14,6 +14,7 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.draw.clip
 import androidx.compose.ui.draw.shadow
+import androidx.compose.ui.graphics.BlendMode.Companion.Screen
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.vector.ImageVector
 import androidx.compose.ui.platform.LocalLayoutDirection
@@ -32,6 +33,7 @@
 import features.sons_of_officers.presentation.SonsOfOfficersScreen
 import features.sons_of_officers.presentation.add_sons_of_officers.AddSonsOfOfficersScreen
 import kotlin.system.exitProcess
+//import androidx.navigation.compose.NavHost
 
 @Composable
 fun NavigationWindow(
@@ -173,3 +175,11 @@
 
     }.build()
 }
+
+
+
+
+sealed class Screen(val route: String) {
+    object SonsOfOfficersScreen : Screen("SonsOfOfficersScreen")
+    object AddSonsOfOfficersScreen : Screen("AddSonsOfOfficersScreen")
+}
\ No newline at end of file
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.jetbrains.compose.desktop.application.dsl.TargetFormat\r\n\r\n\r\nval koin_core_version: String by project\r\nval koin_androidx_compose_version: String by project\r\nval realm_version: String by project\r\nval kotlin_coroutines_version: String by project\r\n\r\nplugins {\r\n    kotlin(\"multiplatform\")\r\n    id(\"org.jetbrains.compose\")\r\n    id(\"io.realm.kotlin\")\r\n}\r\n\r\ngroup = \"com.example\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    google()\r\n    mavenCentral()\r\n    maven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\r\n    maven(\"https://jitpack.io\")\r\n}\r\n\r\n\r\nkotlin {\r\n    jvm {\r\n        jvmToolchain(17)\r\n        withJava()\r\n    }\r\n    sourceSets {\r\n        val jvmMain by getting {\r\n            dependencies {\r\n                implementation(compose.desktop.currentOs)\r\n                implementation(compose.materialIconsExtended)\r\n                //Koin Dependency injection\r\n                implementation(\"io.insert-koin:koin-core:$koin_core_version\")\r\n                implementation(\"io.insert-koin:koin-androidx-compose:$koin_androidx_compose_version\")\r\n\r\n                //Apache POI library to work with Xlsx files\r\n                implementation(\"org.apache.poi:poi:4.1.2\")\r\n                implementation(\"org.apache.poi:poi-ooxml:4.1.2\")\r\n\r\n                //Realm Mongodb Database\r\n                implementation(\"io.realm.kotlin:library-base:$realm_version\") // Add to use local realm (no sync)\r\n                implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version\") // Add to use coroutines with the SDK\r\n            }\r\n        }\r\n        val jvmTest by getting\r\n    }\r\n}\r\n\r\ncompose.desktop {\r\n    application {\r\n        mainClass = \"MainKt\"\r\n        nativeDistributions {\r\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)\r\n            packageName = \"demo\"\r\n            packageVersion = \"1.0.0\"\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision 31e4316feaefdbe86203fa4bfc858c0b32137c7e)
+++ b/build.gradle.kts	(date 1688509631021)
@@ -33,6 +33,7 @@
             dependencies {
                 implementation(compose.desktop.currentOs)
                 implementation(compose.materialIconsExtended)
+
                 //Koin Dependency injection
                 implementation("io.insert-koin:koin-core:$koin_core_version")
                 implementation("io.insert-koin:koin-androidx-compose:$koin_androidx_compose_version")
Index: src/jvmMain/kotlin/features/sons_of_officers/presentation/sons_of_officers/FilterState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package features.sons_of_officers.presentation.sons_of_officers\r\n\r\ndata class FilterState(\r\n    val libyaId:String = \"\",\r\n    val fileNumber:String=\"\",\r\n    val educationLevel:String=\"\",\r\n    val city:String=\"\",\r\n    val fileState:String=\"\",\r\n    val referralForTraining:String=\"\",\r\n){\r\n    fun getFilterStateVariablesNamesAndValues():Map<String,String>{\r\n        val variables = this.javaClass.declaredFields\r\n        val values = variables.map { field ->\r\n            field.isAccessible = true\r\n            field.get(this)\r\n        }\r\n        val variableNames = variables.map { it.name }\r\n        return variableNames.zip(values).associate { it.first to it.second.toString() }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/jvmMain/kotlin/features/sons_of_officers/presentation/sons_of_officers/FilterState.kt b/src/jvmMain/kotlin/features/sons_of_officers/presentation/sons_of_officers/FilterState.kt
--- a/src/jvmMain/kotlin/features/sons_of_officers/presentation/sons_of_officers/FilterState.kt	(revision 31e4316feaefdbe86203fa4bfc858c0b32137c7e)
+++ b/src/jvmMain/kotlin/features/sons_of_officers/presentation/sons_of_officers/FilterState.kt	(date 1688509631179)
@@ -1,5 +1,7 @@
 package features.sons_of_officers.presentation.sons_of_officers
 
+import androidx.compose.ui.text.toLowerCase
+
 data class FilterState(
     val libyaId:String = "",
     val fileNumber:String="",
@@ -8,13 +10,11 @@
     val fileState:String="",
     val referralForTraining:String="",
 ){
-    fun getFilterStateVariablesNamesAndValues():Map<String,String>{
-        val variables = this.javaClass.declaredFields
-        val values = variables.map { field ->
-            field.isAccessible = true
-            field.get(this)
-        }
-        val variableNames = variables.map { it.name }
-        return variableNames.zip(values).associate { it.first to it.second.toString() }
-    }
-}
\ No newline at end of file
+//    fun getFilterStateVariablesNamesAndValues():Map<String,String>{
+//        return mapOf(
+//            "libyaId" to libyaId,
+//            "fileNumber" to fileNumber,
+//            "educationLevel" to educationLevel,
+//            "city" to city,
+//            "fileState" to fileState,
+//            "referralForTraining" to referralForTraini
\ No newline at end of file
